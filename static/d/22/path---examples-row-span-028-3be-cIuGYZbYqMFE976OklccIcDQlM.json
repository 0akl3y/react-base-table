{"data":{"rawCode":{"content":"const columns = generateColumns(10, undefined, { resizable: true })\nconst data = generateData(columns, 200)\n\nconst spanIndex = 1\ncolumns[spanIndex].rowSpan = ({ rowData, rowIndex }) => (rowIndex % 4) + 1\ncolumns[spanIndex].align = Column.Alignment.CENTER\n\nconst rowSpan = ({ rowData, rowIndex, columnIndex }) =>\n  rowIndex % 5 === 0 ? columnIndex % 5 : 0 + 1\n\nconst rowRenderer = ({ rowData, rowIndex, cells, columns }) => {\n  return cells.map((cell, columnIndex) => {\n    const span = rowSpan({ rowData, rowIndex, columnIndex })\n    if (span <= 1) return cell\n\n    const style = {\n      ...cells[spanIndex].props.style,\n      backgroundColor: 'lightgray',\n      height: 50 * span,\n      alignSelf: 'flex-end',\n    }\n    return React.cloneElement(cell, { style })\n  })\n  const span = columns[spanIndex].rowSpan({ rowData, rowIndex })\n  if (span > 1) {\n    let width = cells[spanIndex].props.style.width\n    for (let i = 1; i < span; i++) {\n      width += cells[spanIndex + i].props.style.width\n      cells[spanIndex + i] = null\n    }\n    const style = {\n      ...cells[spanIndex].props.style,\n      width,\n      backgroundColor: 'lightgray',\n    }\n    cells[spanIndex] = React.cloneElement(cells[spanIndex], { style })\n  }\n  return cells\n}\n\nexport default () => (\n  <Table\n    fixed\n    columns={columns}\n    data={data}\n    rowRenderer={rowRenderer}\n    overscanRowCount={5}\n  />\n)\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"name":"row-span"}}