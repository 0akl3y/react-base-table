{"data":{"componentMetadata":{"displayName":"BaseTable","description":{"childMarkdownRemark":{"html":"<p>React table component</p>"}},"props":[{"name":"classPrefix","type":{"name":"string","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Prefix for table's inner className</p>"}},"defaultValue":{"value":"'BaseTable'"}},{"name":"className","type":{"name":"string","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Class name for the table</p>"}},"defaultValue":null},{"name":"style","type":{"name":"object","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Custom style for the table</p>"}},"defaultValue":null},{"name":"children","type":{"name":"node","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A collection of Column</p>"}},"defaultValue":null},{"name":"columns","type":{"name":"arrayOf","value":{"name":"shape","value":"Column.propTypes","computed":true},"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Columns for the table</p>"}},"defaultValue":null},{"name":"data","type":{"name":"arrayOf","value":{"name":"object"},"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The data for the table</p>"}},"defaultValue":{"value":"[]"}},{"name":"frozenData","type":{"name":"arrayOf","value":{"name":"object"},"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The data be frozen to top, <code class=\"language-text\">rowIndex</code> is negative and started from <code class=\"language-text\">-1</code></p>"}},"defaultValue":{"value":"[]"}},{"name":"rowKey","type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The key field of each data item</p>"}},"defaultValue":{"value":"'id'"}},{"name":"width","type":{"name":"number","value":null,"raw":null},"required":true,"description":{"childMarkdownRemark":{"html":"<p>The width of the table</p>"}},"defaultValue":null},{"name":"height","type":{"name":"number","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The height of the table, will be ignored if <code class=\"language-text\">maxHeight</code> is set</p>"}},"defaultValue":null},{"name":"maxHeight","type":{"name":"number","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The max height of the table, the table's height will auto change when data changes,\nwill turns to vertical scroll if reaches the max height</p>"}},"defaultValue":null},{"name":"rowHeight","type":{"name":"number","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The height of each table row</p>"}},"defaultValue":{"value":"50"}},{"name":"headerHeight","type":{"name":"union","value":[{"name":"number"},{"name":"arrayOf","value":{"name":"number"}}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The height of the table header, set to 0 to hide the header, could be an array to render multi headers.</p>"}},"defaultValue":{"value":"50"}},{"name":"footerHeight","type":{"name":"number","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The height of the table footer</p>"}},"defaultValue":{"value":"0"}},{"name":"fixed","type":{"name":"bool","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Whether the width of the columns are fixed or flexible</p>"}},"defaultValue":{"value":"false"}},{"name":"disabled","type":{"name":"bool","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Whether the table is disabled</p>"}},"defaultValue":null},{"name":"overlayRenderer","type":{"name":"union","value":[{"name":"func"},{"name":"element"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Custom renderer on top of the table component</p>"}},"defaultValue":null},{"name":"emptyRenderer","type":{"name":"union","value":[{"name":"func"},{"name":"element"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Custom renderer when the length of data is 0</p>"}},"defaultValue":null},{"name":"footerRenderer","type":{"name":"union","value":[{"name":"func"},{"name":"element"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Custom footer renderer, available only if <code class=\"language-text\">footerHeight</code> is larger then 0</p>"}},"defaultValue":null},{"name":"headerRenderer","type":{"name":"union","value":[{"name":"func"},{"name":"element"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Custom header renderer\nThe renderer receives props <code class=\"language-text\">{ cells, columns, headerIndex }</code></p>"}},"defaultValue":null},{"name":"rowRenderer","type":{"name":"union","value":[{"name":"func"},{"name":"element"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Custom row renderer\nThe renderer receives props <code class=\"language-text\">{ isScrolling, cells, columns, rowData, rowIndex, depth }</code></p>"}},"defaultValue":null},{"name":"headerClassName","type":{"name":"union","value":[{"name":"string"},{"name":"func"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Class name for the table header, could be a callback to return the class name\nThe callback is of the shape of <code class=\"language-text\">({ columns, headerIndex }) =&gt; string</code></p>"}},"defaultValue":null},{"name":"rowClassName","type":{"name":"union","value":[{"name":"string"},{"name":"func"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Class name for the table row, could be a callback to return the class name\nThe callback is of the shape of <code class=\"language-text\">({ columns, rowData, rowIndex }) =&gt; string</code></p>"}},"defaultValue":null},{"name":"headerProps","type":{"name":"union","value":[{"name":"object"},{"name":"func"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Extra props applied to header element\nThe handler is of the shape of <code class=\"language-text\">({ columns, headerIndex }) object</code></p>"}},"defaultValue":null},{"name":"headerCellProps","type":{"name":"union","value":[{"name":"object"},{"name":"func"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Extra props applied to header cell element\nThe handler is of the shape of <code class=\"language-text\">({ columns, column, columnIndex, headerIndex }) =&gt; object</code></p>"}},"defaultValue":null},{"name":"rowProps","type":{"name":"union","value":[{"name":"object"},{"name":"func"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Extra props applied to row element\nThe handler is of the shape of <code class=\"language-text\">({ columns, rowData, rowIndex }) =&gt; object</code></p>"}},"defaultValue":null},{"name":"cellProps","type":{"name":"union","value":[{"name":"object"},{"name":"func"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Extra props applied to row cell element\nThe handler is of the shape of <code class=\"language-text\">({ columns, column, columnIndex, rowData, rowIndex }) =&gt; object</code></p>"}},"defaultValue":null},{"name":"expandIconProps","type":{"name":"union","value":[{"name":"object"},{"name":"func"}],"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Extra props applied to ExpandIcon component\nThe handler is of the shape of <code class=\"language-text\">({ rowData, rowIndex, depth, expandable, expanded }) =&gt; object</code></p>"}},"defaultValue":null},{"name":"expandColumnKey","type":{"name":"string","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The key for the expand column which render the expand icon if the data is a tree</p>"}},"defaultValue":null},{"name":"defaultExpandedRowKeys","type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Default expanded row keys when initialize the table</p>"}},"defaultValue":{"value":"[]"}},{"name":"expandedRowKeys","type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Controlled expanded row keys</p>"}},"defaultValue":null},{"name":"onRowExpand","type":{"name":"func","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A callback function when expand or collapse a tree node\nThe handler is of the shape of <code class=\"language-text\">({ expanded, rowData, rowIndex, rowKey }) =&gt; *</code></p>"}},"defaultValue":{"value":"noop"}},{"name":"onExpandedRowsChange","type":{"name":"func","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A callback function when the expanded row keys changed\nThe handler is of the shape of <code class=\"language-text\">(expandedRowKeys) =&gt; *</code></p>"}},"defaultValue":{"value":"noop"}},{"name":"sortBy","type":{"name":"shape","value":{"key":{"name":"string","description":"Sort key","required":false},"order":{"name":"enum","value":[{"value":"SortOrder.ASC","computed":true},{"value":"SortOrder.DESC","computed":true}],"description":"Sort order","required":false}},"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>The sort state for the table</p>"}},"defaultValue":{"value":"{}"}},{"name":"onColumnSort","type":{"name":"func","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A callback function for the header cell click event\nThe handler is of the shape of <code class=\"language-text\">({ column, key, order }) =&gt; *</code></p>"}},"defaultValue":{"value":"noop"}},{"name":"onColumnResize","type":{"name":"func","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A callback function when resizing the column width\nThe handler is of the shape of <code class=\"language-text\">({ column, width }) =&gt; *</code></p>"}},"defaultValue":{"value":"noop"}},{"name":"useIsScrolling","type":{"name":"bool","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Adds an additional isScrolling parameter to the row renderer.\nThis parameter can be used to show a placeholder row while scrolling.</p>"}},"defaultValue":{"value":"false"}},{"name":"overscanRowCount","type":{"name":"number","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Number of rows to render above/below the visible bounds of the list</p>"}},"defaultValue":{"value":"1"}},{"name":"getScrollbarSize","type":{"name":"func","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Custom scrollbar size measurement</p>"}},"defaultValue":{"value":"defaultGetScrollbarSize"}},{"name":"onScroll","type":{"name":"func","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A callback function when scrolling the table\nThe handler is of the shape of <code class=\"language-text\">({ scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested }) =&gt; *</code></p>\n<p><code class=\"language-text\">scrollLeft</code> and <code class=\"language-text\">scrollTop</code> are numbers.</p>\n<p><code class=\"language-text\">horizontalDirection</code> and <code class=\"language-text\">verticalDirection</code> are either <code class=\"language-text\">forward</code> or <code class=\"language-text\">backward</code>.</p>\n<p><code class=\"language-text\">scrollUpdateWasRequested</code> is a boolean. This value is true if the scroll was caused by <code class=\"language-text\">scrollTo*</code>,\nand false if it was the result of a user interaction in the browser.</p>"}},"defaultValue":{"value":"noop"}},{"name":"onEndReached","type":{"name":"func","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A callback function when scrolling the table within <code class=\"language-text\">onEndReachedThreshold</code> of the bottom\nThe handler is of the shape of <code class=\"language-text\">({ distanceFromEnd }) =&gt; *</code></p>"}},"defaultValue":null},{"name":"onEndReachedThreshold","type":{"name":"number","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>Threshold in pixels for calling <code class=\"language-text\">onEndReached</code>.</p>"}},"defaultValue":{"value":"500"}},{"name":"onRowsRendered","type":{"name":"func","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A callback function with information about the slice of rows that were just rendered\nThe handler is of the shape of <code class=\"language-text\">({ overscanStartIndex, overscanStopIndex, startIndex， stopIndex }) =&gt; *</code></p>"}},"defaultValue":{"value":"noop"}},{"name":"onScrollbarPresenceChange","type":{"name":"func","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A callback function when the scrollbar presence state changed\nThe handler is of the shape of <code class=\"language-text\">({ size, vertical, horizontal }) =&gt; *</code></p>"}},"defaultValue":{"value":"noop"}},{"name":"rowEventHandlers","type":{"name":"object","value":null,"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A object for the row event handlers\nEach of the keys is row event name, like <code class=\"language-text\">onClick</code>, <code class=\"language-text\">onDoubleClick</code> and etc.\nEach of the handlers is of the shape of <code class=\"language-text\">({ rowData, rowIndex, rowKey, event }) =&gt; object</code></p>"}},"defaultValue":null},{"name":"components","type":{"name":"shape","value":{"TableCell":{"name":"func","required":false},"TableHeaderCell":{"name":"func","required":false},"ExpandIcon":{"name":"func","required":false},"SortIndicator":{"name":"func","required":false}},"raw":null},"required":false,"description":{"childMarkdownRemark":{"html":"<p>A object for the custom components, like <code class=\"language-text\">ExpandIcon</code> and <code class=\"language-text\">SortIndicator</code></p>"}},"defaultValue":null}],"childrenComponentMethodExt":[{"name":"getExpandedState","params":[],"childMarkdownRemark":{"html":"<p>Get the expanded state, fallback to normal state if not expandable.</p>"}},{"name":"getTotalRowsHeight","params":[],"childMarkdownRemark":{"html":"<p>Get the total height of all rows, including expanded rows.</p>"}},{"name":"getTotalColumnsWidth","params":[],"childMarkdownRemark":{"html":"<p>Get the total width of all columns.</p>"}},{"name":"forceUpdateTable","params":[],"childMarkdownRemark":{"html":"<p>Forcefully re-render the inner Grid component.</p>\n<p>Calling <code class=\"language-text\">forceUpdate</code> on <code class=\"language-text\">Table</code> may not re-render the inner Grid since it uses <code class=\"language-text\">shallowCompare</code> as a performance optimization.\nUse this method if you want to manually trigger a re-render.\nThis may be appropriate if the underlying row data has changed but the row sizes themselves have not.</p>"}},{"name":"scrollToPosition","params":[{"name":"offset","type":{"name":"object"}}],"childMarkdownRemark":{"html":"<p>Scroll to the specified offset.\nUseful for animating position changes.</p>"}},{"name":"scrollToTop","params":[{"name":"scrollTop","type":{"name":"number"}}],"childMarkdownRemark":{"html":"<p>Scroll to the specified offset vertically.</p>"}},{"name":"scrollToLeft","params":[{"name":"scrollLeft","type":{"name":"number"}}],"childMarkdownRemark":{"html":"<p>Scroll to the specified offset horizontally.</p>"}},{"name":"scrollToRow","params":[{"name":"rowIndex","type":{"name":"number"}},{"name":"align","type":{"name":"string"}}],"childMarkdownRemark":{"html":"<p>Scroll to the specified row.\nBy default, the table will scroll as little as possible to ensure the row is visible.\nYou can control the alignment of the row though by specifying an align property. Acceptable values are:</p>\n<ul>\n<li><code class=\"language-text\">auto</code> (default) - Scroll as little as possible to ensure the row is visible.\n(If the row is already visible, it won't scroll at all.)</li>\n<li><code class=\"language-text\">smart</code> - If the row is already visible, don't scroll at all. If it is less than one viewport away,\nscroll as little as possible so that it becomes visible.\nIf it is more than one viewport away, scroll so that it is centered within the grid.</li>\n<li><code class=\"language-text\">center</code> - Center align the row within the table.</li>\n<li><code class=\"language-text\">end</code> - Align the row to the bottom, right hand side of the table.</li>\n<li><code class=\"language-text\">start</code> - Align the row to the top, left hand of the table.</li>\n</ul>"}},{"name":"setExpandedRowKeys","params":[{"name":"expandedRowKeys","type":{"name":"array"}}],"childMarkdownRemark":{"html":"<p>Set <code class=\"language-text\">expandedRowKeys</code> manually.\nThis method is available only if <code class=\"language-text\">expandedRowKeys</code> is uncontrolled.</p>"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"name":"BaseTable"}}